//"Literal" colors are named after and should resemble that color.

$Color--white:                                      #FFFFFF;
$Color--black:                                      #000000;

$Color--gray_lighter:                               #F8F8F8;
$Color--gray_light:                                 #EBEBEB;
$Color--gray:                                       #D8D8D8;
$Color--gray_dark: 									       #CFCFCF;
$Color--gray_darker: 								       #B9B9B9;
$Color--gray_darkest: 								       #979797;

$Color--red:                                        #ff0000;

//"Semantic" colors are not named after a particular color and should be
//changed as necessary to meet the design requirements. Components may consume
//semantic colors directly or name their own variables that pull those colors.
//Uses for semantic colors include colors related to a brand name as well as
//generic, high-level theme decisions like a primary accent color.
// $Color--primary:                                    {{settings.color_primary}};
$Color--primary:                                    #{"{{settings\.color_black}}"};
$Color--site_header:                                #{"{{settings\.bg-color_site-header}}"};


// Customizer Values
$Color--primary: #{"{{ settings\.color_primary }}"};
$Color--black: #{"{{ settings\.color_black }}"};
$Color--white: #{"{{ settings\.color_white }}"};
$Color--grey: #{"{{ settings\.color_grey }}"};

$Color_accent-1: #{"{{ settings\.color_accent-1 }}"};
$Color_accent-2: #{"{{ settings\.color_accent-2 }}"};
$Color_accent-3: #{"{{ settings\.color_accent-3 }}"};

$Color-site-background: #{"{{ settings\.color-site-background }}"};

$Color-body-black: #{"{{ settings\.color_body_text_black }}"};
$Color-body-white: #{"{{ settings\.color_body_text_white }}"}; 

$Color--Announcement-Bar-background: #{"{{ settings\.bg-color_announcement-bar }}"};
$Color--Announcement-Bar-text: #{"{{ settings\.color_announcement-bar }}"};


$Color--SiteHeader__Main-Background: #{"{{ settings\.bg-color_site-header }}"};
$Color--SiteHeader__Top-Background: #{"{{ settings\.bg-color_site-header-top }}"};
$Color--SiteHeader__Bottom-Background: #{"{{ settings\.bg-color_site-header-bottom }}"};
$Color--SiteHeader__Top: #{"{{ settings\.color_site-header-top }}"};
$Color--SiteHeader__Bottom: #{"{{ settings\.color_site-header-bottom }}"};

$Color--SiteFooter-Top-Background: #{"{{ settings\.color_footer_top-bg }}"};
$Color--SiteFooter-Bottom-Background: #{"{{ settings\.color_footer_bottom-bg }}"};
$Color--SiteFooter-Top-Text: #{"{{ settings\.color_footer_text_top }}"};
$Color--SiteFooter-Bottom-Text: #{"{{ settings\.color_footer_text_bottom }}"};



$Color--facebook:                                   #3B5998;
$Color--twitter:                                    #4099FF;
$Color--linkedin:                                   #007bb6;
$Color--gplus:                                      #C63D2D;
$Color--pinterest:                                  #C92228;

$Color--purple_light:								#7986cb;
$Color--purple:										#3f51b5;
$Color--transparent:								transparent;

@mixin background-opacity ($color, $opacity) {
    $rgba-color: rgba(red($color), green($color), blue($color), $opacity);
    background-color: $color;
    background-color: $rgba-color;
}

@function color_luminance($color) {
    // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
    // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();

    @for $i from 1 through 3 {
        $rgb: nth($rgba, $i);
        $rgb: $rgb / 255;

        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

        $rgba2: append($rgba2, $rgb);
    }

    @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

@function color_contrast($color1, $color2) {
    // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
    // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
    $luminance1: color_luminance($color1) + .05;
    $luminance2: color_luminance($color2) + .05;
    $ratio: $luminance1 / $luminance2;

    @if $luminance2 > $luminance1 {
        $ratio: 1 / $ratio;
    }

    $ratio: round($ratio * 10) / 10;

    @return $ratio;
}

@function pick_best_color($base, $colors, $tolerance: 0) {
    $contrast: color_contrast($base, nth($colors, 1));
    $best: nth($colors, 1);

    @for $i from 2 through length($colors) {
        $current_contrast: color_contrast($base, nth($colors, $i));
        @if ($current_contrast - $contrast > $tolerance) {
            $contrast: color_contrast($base, nth($colors, $i));
            $best: nth($colors, $i);
        }
    }

    @if ($contrast < 3) {
        @warn "Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}";
    }

    @return $best;
}

@function contrast($base, $color1, $color2) {
    /// LESS-compatible contrast function
    @return pick_best_color($base, ($color1, $color2));
}
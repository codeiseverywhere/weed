$Grid--columns: 12;
$Grid--gutter_width: 30px;
$Grid--emulation_width: $Viewport-md;
//Determines what width the fallback percentages are calculated at.

// **** Superior grid system with REAL GUTTERS **** //

//Columns with no gutters
@mixin make-Column($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $float: left, $Grid--parent_width: 100%) {
    min-height: 1px;

    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            float: $float;
            width: ($column-width / $Grid--columns * $Grid--parent_width);
        }
    } @else {
        float: $float;
        width: ($column-width / $Grid--columns * $Grid--parent_width);
    }
}

//Columns with margin-based gutters
@mixin make-Column--gutter($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $float: left, $Grid--parent_width: 100%) {
    @if $_ == min-gutters {
        @media (min-width: $min-breakpoint) {
            margin-left: ($Grid--gutter_width / 2);
            margin-right: ($Grid--gutter_width / 2);
        }
    } @else {
        margin-left: ($Grid--gutter_width / 2);
        margin-right: ($Grid--gutter_width / 2);
    }

    min-height: 1px;

    @if $_ == min or $_ == min-gutters {
        @media (min-width: $min-breakpoint) {
            float: $float;
            width: (($Grid--emulation_width * $column-width / $Grid--columns - $Grid--gutter_width) / $Grid--emulation_width * $Grid--parent_width);
            width: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) - #{$Grid--gutter_width});
        }
    } @else {
        float: $float;
        width: (($Grid--emulation_width * $column-width / $Grid--columns - $Grid--gutter_width) / $Grid--emulation_width * $Grid--parent_width);
        width: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) - #{$Grid--gutter_width});
    }
}


//Columns with padding-based gutters
@mixin make-Column--padded($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $float: left, $Grid--parent_width: 100%) {
    padding-left: ($Grid--gutter_width / 2);
    padding-right: ($Grid--gutter_width / 2);

    min-height: 1px;

    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            float: $float;
            width: ($column-width / $Grid--columns * $Grid--parent_width);
        }
    } @else {
        float: $float;
        width: ($column-width / $Grid--columns * $Grid--parent_width);
    }
}

// **** Offsets of various forms **** //

//Offsets for margin-based gutters
@mixin make-Column--gutter-offset($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            margin-left: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
            margin-left: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
        }
    } @else {
        margin-left: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
        margin-left: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
    }
}

//Offsets for padding-based gutters
@mixin make-Column--padded-offset($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            padding-left: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
            padding-left: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
        }
    } @else {
        padding-left: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
        padding-left: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
    }
}

//After-offsets for margin-based gutters
@mixin make-Column--gutter-after($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            margin-right: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
            margin-right: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
        }
    } @else {
        margin-right: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
        margin-right: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
    }
}

//After-offsets for padding-based gutters
@mixin make-Column--padded-after($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            padding-right: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
            padding-right: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
        }
    } @else {
        padding-right: ($column-width / $Grid--columns * $Grid--emulation_width + $Grid--gutter_width / 2);
        padding-right: calc((#{$column-width} / #{$Grid--columns} * #{$Grid--parent_width}) + (#{$Grid--gutter_width} / 2));
    }
}

//Offsets for gutterless columns
@mixin make-Column-offset($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            margin-left: ($column-width / $Grid--columns * $Grid--parent_width);
        }
    } @else {
        margin-left: ($column-width / $Grid--columns * $Grid--parent_width);
    }
}

//After-offsets for gutterless columns
@mixin make-Column-after($column-width, $_: "", $min-breakpoint: 0px, $Grid--gutter_width: $Grid--gutter_width, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            margin-right: ($column-width / $Grid--columns * $Grid--parent_width);
        }
    } @else {
        margin-right: ($column-width / $Grid--columns * $Grid--parent_width);
    }
}

//Requires position: relative
@mixin make-Column-push($columns-to-push, $_: "", $min-breakpoint: 0px, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            left: ($columns-to-push / $Grid--columns * $Grid--parent_width);
        }
    } @else {
        left: ($columns-to-push / $Grid--columns * $Grid--parent_width);
    }
}

@mixin make-Column-pull($columns-to-pull, $_: "", $min-breakpoint: 0px, $Grid--parent_width: 100%) {
    @if $_ == min {
        @media (min-width: $min-breakpoint) {
            right: ($columns-to-pull / $Grid--columns * $Grid--parent_width);
        }
    } @else {
        right: ($columns-to-pull / $Grid--columns * $Grid--parent_width);
    }
}

//Rows, for knocking out parent gutters.
@mixin make-Row($Grid--gutter_width: $Grid--gutter_width) {
    margin-left: ($Grid--gutter_width / -2);
    margin-right: ($Grid--gutter_width / -2);
}

@mixin make-Gutter($Grid--gutter_width: $Grid--gutter_width) {
    margin-left: ($Grid--gutter_width / 2);
    margin-right: ($Grid--gutter_width / 2);
}

@mixin make-Padding($Grid--gutter_width: $Grid--gutter_width) {
    padding-left: ($Grid--gutter_width / 2);
    padding-right: ($Grid--gutter_width / 2);
}

/* A Matrix is a series of equally sized elements arranged like Columns, but
 * with the ability to break correctly.
 *
 * It is possible to add interior borders to a Matrix akin to that of an HTML
 * table.
 */
@mixin make-Matrix($Matrix--column_count: 2, $_: "", $min-breakpoint: 0px, $Matrix--previous_column_count: 0, $Border-width: $Border-width, $Border-color: $Border-color) {
    @include clearfix;

    @if $_ == min {
        > * {
            @include make-Column($Grid--columns / $Matrix--column_count, min, $min-breakpoint);
        }

        @media (min-width: $min-breakpoint) {
            > * {
                border: $Border-width solid $Border-color;
                border-width: $Border-width 0 0 $Border-width;

                &:nth-child(#{$Matrix--previous_column_count}n+1) {
                    border-left-color: $Border-color;
                    clear: none;
                }

                &:nth-child(-n+#{$Matrix--previous_column_count}) {
                    border-top-color: $Border-color;
                }

                &:nth-child(#{$Matrix--column_count}n+1) {
                    border-left-color: transparent;
                    clear: left;
                }

                &:nth-child(-n+#{$Matrix--column_count}) {
                    border-top-color: transparent;
                }
            }
        }
    } @else {
        > * {
            @include make-Column($Grid--columns / $Matrix--column_count);
            border: $Border-width solid $Border-color;
            border-width: $Border-width 0 0 $Border-width;

            &:nth-child(#{$Matrix--column_count}n+1) {
                border-left-color: transparent;
                clear: none;
            }

            &:nth-child(-n+#{$Matrix--column_count}) {
                border-top-color: transparent;
            }
        }
    }
}
